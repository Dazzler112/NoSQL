키와 값으로 이루어진, 저장과 조회 데이터베이스
조금 더 넓은 의미로 Key-Value Database를 사용하는 경우 Column Family Database들도 포함하여 이야기하는 경우도 많다. 본문에서는 조금 더 세분화해서 그 둘을 구분해서 분류
 Value에는 어떤 형태의 데이터든지 담을 수 있다.

-Key-Value Database의 Key 값은 unique한 고유값으로 유지되어야 한다.
-테이블간 조인을 고려하지 않으므로 RDB(Relational Database)에서 관리하는 외부키나, 컬럼별 constraints등이 필요 없다.
-값에 모든 데이터 타입을 허용하며, 그래서 개발자들이 데이터 입력 단계에서 검증 로직을 제대로 구현하는 것이 중요하다.

Key-Value Database는, 간단한 데이터 모델을 대상으로 데이터를 자주 읽고 쓰는 애플리케이션에 적합하다. 
값은 boolean이나 integer값처럼 단순한 스칼라 값이 일반적이지만, 리스트나 JSON같은 구조화된 값도 가능하다.

Key-Value Database에는 다음과 같은 데이터베이스들이 있다 
- Redis
- Riak
- Oracle Berkely
- AWS DynamoDB

Key-Value Database는 주로 아래와 같은 형태의 애플리케이션에서 사용된다
1. 성능 향상을 위해 관계형 데이터베이스에서 데이터 캐싱
2. 장바구니 같은 웹 애플리케이션에서 일시적인 속성 추적
3. 모바일 애플리케이션용 사용자 데이터 정보와 구성 정보 저장
4. 이미지나 오디오 파일 같은 대용량 객체 저장

WHY ? 
RDB의 단점
1. 이미지나 오디오 데이터가 관계모델로 표현 x
2. 구조( 스키마) 가 존재, 스키마 구조가 고정되면 변경 x
: 구조가 정해져있기 때문에 RDB에선 SQL질의어만 잘 넣으면 어떤 정보도 찾을 수 있다는 것이 장점이자 단점이다.

WHEN ?
응용 영역
타임라인을 표시하는 웹 어플리케이션에서 사용
배열 형식 데이터에 빈번한 추가/삭제가 일어나는 경우

[예시]
- 사용자 리뷰에 대한 좋아요 표시 및 취소
- 개별 이벤트 페이지 방문 횟수 저장
: 이벤트 클릭 횟수가 증가하면 성능이 저하되고, 이벤트가 종료되면 해당 필드가 사용 없는 경우 기존 관계데이터 베이스를 수정하지 않고 key value model을 사용하면 효율적이다.
- 모든 페이지의 방문 횟수 조회
- 쇼핑 카트 데이터
- 웹 앱에 세션 정보 저장

(정리
기본적으로 배웠던 Key Value로 저장하는 방식을 말하는거 같다 내가 배웠던 경우는 MAP인터페이스 배웠을때 배웠던거 같다
MAP은 key는 중복될수없지만 값은 중복가능하게 담을수 있다고 배웠는대 이것과 비슷한거 같다)
