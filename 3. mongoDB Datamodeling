몽고디비 데이터 모델링
                      -------------
                     ｜   몽고DB   ｜
                      -------------
                   /          ｜      \      
              ----------      ---       ---       
             ｜   DB   ｜    ｜DB｜    ｜DB｜       
              ----------      ---       ---           
         /          ｜    \
     ------        ------     ------
    ｜컬렉션｜    ｜컬렉션｜ ｜컬렉션｜
     ------        ------     ------
  ///｜｜\\\          ｜  \       ｜   \  
 -----------------    --    --     --     --
｜to many document｜｜do｜｜do｜  ｜do｜ ｜do｜  
 ------------------   --    --     --     --
Database :
Collection의 물리적 컨테이너

Collection :
RDBMS에서의 table이라고 생각하면 된다.
Document의 그룹, Document의 내부에 위치해 있음.
RDBMS와 달리 스키마를 따로 갖고 있지 않음 (동적 스키마로 생성)

Document :
nosql을 다른말로 Document Oriented Database라 함.
한개 이상의 key-value 쌍으로 이루어진 구조
일반 rdbms에서는 row or tuple과 유사하다 생각하면 된다.

Key/Field :
일반 Rdbms에서 Column이라 생각하면 된다.
컬럼 명과 저장 값으로 생각하면 쉽다.



이들의 관계를 그림으로 표현하면 아래 이미지와 같다.
｜--------------------------------- SERVER ---------------------------------｜
｜                                                                          ｜
｜   ｜------------------------------ DB -----------------------------｜    ｜
｜   ｜   ｜--------------------- COLLECTION ----------------------｜ ｜    ｜
｜   ｜   ｜    ｜---------------- DOCUMENT -------------------｜  ｜ ｜    ｜
｜   ｜   ｜    ｜                                             ｜  ｜ ｜    ｜
｜   ｜   ｜    ｜                                             ｜  ｜ ｜    ｜
｜   ｜   ｜    ｜               { KEY : VALUE }               ｜  ｜ ｜    ｜
｜   ｜   ｜    ｜                                             ｜  ｜ ｜    ｜
｜   ｜   ｜    ｜                                             ｜  ｜ ｜    ｜
｜   ｜   ｜    ｜---------------------------------------------｜  ｜ ｜    ｜
｜   ｜   ｜-------------------------------------------------------｜ ｜    ｜
｜   ｜---------------------------------------------------------------｜    ｜
｜                                                                          ｜
｜--------------------------------------------------------------------------｜

Tip
한 쌍 이상의 Key 와 value가 pair 로 이루어진 Document 들이 모여 Collection 을 이루고, 
Collection 들은 Database 안에 포함 되어 있다. 그리고 Database 는 Server 안에 위치한다.



             RDBMS                                   MongoDB
｜----------------------------｜         ｜----------------------------｜
｜ ｜------ DATABASE ------｜ ｜         ｜ ｜------ DATABASE ------｜ ｜ 
｜ ｜ ｜---- TABLES ----｜ ｜ ｜ㅡㅡㅡㅡ ｜ ｜ ｜-- COLLECTIONS --｜ ｜ ｜
｜ ｜ ｜ ｜-- ROWS --｜ ｜ ｜ ｜ㅡㅡㅡㅡ ｜ ｜ ｜ ｜-DOCUMENTS-｜ ｜ ｜ ｜
｜ ｜ ｜ ｜ COLUMNS  ｜ ｜ ｜ ｜ㅡㅡㅡㅡ ｜ ｜ ｜ ｜  FIELDS   ｜ ｜ ｜ ｜
｜ ｜ ｜ ｜----------｜ ｜ ｜ ｜         ｜ ｜ ｜ ｜-----------｜ ｜ ｜ ｜
｜ ｜ ｜----------------｜ ｜ ｜         ｜ ｜ ｜-----------------｜ ｜ ｜              
｜ ｜----------------------｜ ｜         ｜ ｜-----------------------｜ ｜                                     
｜----------------------------｜         ｜-----------------------------｜                                        

MongoDB 모델 구성을 알아봤으니 직접 Document 를 모델링 해보자.

이해를 돕기위해 인스타그램을 위한 데이터베이스를 모델링한다고 가정해 본다.

인스타그램에서 게시물을 올릴 때 필요한 정보는 다음과 같다.

게시글에는 사진, 설명, 작성자, 작성일이 포함되어 있다.
게시글에는 0개 이상의 해쉬태그를 가질 수 있다.
게시글에 덧글을 달 수 있다.
만약 관계형 데이터베이스를 이용한다면 table 은 총 세개가 만들어 져야 할 것이다.



comment         article          hashtags
  id    ------    id     ------     id
post_id          image            post_id  
 author         content             tag
 text            author
 time             time

comment, article, hashtags 테이블들은 각각의 구조(Schema)를 가지고 있고, 
table 안의 row 들을 이 구조를 따라야 한다. 그리고 각 테이블의 id 의 관계성을 이용하여 세 테이블을 JOIN 시켜 한 페이지에 출력할 것이다.

 

위와 같은 데이터를 MongoDB 에서 처리하려면, 
MongoDB 는 Schema-less 이므로 하나의 Collection 하위의 Document 들이 모두 같은 구조를 가지고 있을 필요가 없다.


JAVASCRIPT
{
  _id: POST_ID, title: POST_TITLE,
  content: POST_CONTENT,
  author: POST_WRITER,
  hashtags: [ TAG1, TAG2, TAG3 ], // subdocument 
  time: POST_TIME
  comments: [ // subdocument 
     { 
       username: COMMENT_WRITER,
       mesage: COMMENT_MESSAGE,
       time: COMMENT_TIME
     },
     { 
       username: COMMENT_WRITER,
       mesage: COMMENT_MESSAGE,
       time: COMMENT_TIME
     }
  ]
}

따라서 위와 같이 하나의 Document 안에 모든 정보를 포함한다.

Document 안에 있는 hashtags, comments 의 배열과 같은 하위의 Document 를 subdocument 라고 한다.

만약 어떤 게시물에 태그나 덧글이 없다면 해당 필드가 없어도 상관없다. (Schema-less)
