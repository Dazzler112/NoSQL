데이터 수정 (update)
기본적으로 하나의 쿼리만 수정
$set을 해야 해당 필드만 바뀐다.
만약 $set을 넣지 않고 그냥 { hp: 30 } 하면 다큐먼트의 내용이 다 지워지고 { hp: 30 } 이라는 객체로 통째로 바뀌어버린다. (통째로 대체)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
db.book.update({
    "hits":110
}, {
    $set:{
    	"hits":120
    }
})
// hits:110인걸 검색해서 120으로 업데이트 하라
// update 첫번째인자는 검색 쿼리 key/field, 두번째 인자는 업데이트 쿼리 {$set: {key:field}}
예)
> db.book.find({"hits":100})
{"_id" : ObjectId("618e31a414694987b7eccef3"), "name", : "A", "hits" : 100}
> db.book.update({"hits":100},{$set:{"hits":10000}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1})
> db.book.find({"hits":10000})
{"_id" : ObjectId("618e31a414694987b7eccef3"), "name", : "A", "hits" : 10000}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
db.book.update({
    "hits":120 // hits이 120인걸 찾아
}, {
	$set: {
    	hits:125, // 125로 업데이트를 하며,
    	name:"AA" // 기존에 name이 없었는데 AA를 추가
    }
})


db.book.update({
    name:"F"
}, {
    $set: {
    	name:"F",
    	hits:20
    }
}, {
    upsert:true // upsert : 값이 없을 경우 insert 시행. 
   			    // update + insert의 합성어
})
// 만약 수정할 대상이 없다면 보통의 경우는 아무것도 변하지 않고 종료된다. 
// upsert옵션을 통해 삽입 할 수 있다.


db.book.update({
    hits:{$lte:30} // hits <= 30
}, {
    $set:{
        bestseller:"N"
    }
},{
    multi:true
})
// update는 기본적으로 하나의 행만 업데이트
// 따라서 여러 행을 업데이트 할 경우 {multi:true}로 설정
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
db.book.update({
    name:"F"
}, {
    $push:{
        category:"science" // $push를 이용하여 category라는 field에 science라는 배열을 추가
    }
})


db.book.update({
    name:"F"
}, {
    $pull:{
    	category:"science" // $pull을 이용하여 science 배열 값 제거
	}
})
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 
UpdateOne / UpdateMany / ReplaceOne
updateOne은 매칭되는 다큐먼트 중 첫 번째만 수정
updateMany는 매칭되는 모든 다큐먼트를 수정. 기존의 {multi:true} 옵션이 두 메소드로 나누어졌다고 생각하면 된다.
replaceOne 메소드는 다큐먼트를 통째로 다른 것으로 대체. $set을 안 썼을 때 상황과 유사.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
db.monsters.updateOne({ 
    name: 'Slime' 
}, { 
    $set: { 
 	   hp: 25 
    } 
});
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 

FindAndModify
update 메소드와는 달리 upsert(update + insert)과 remove까지 같이 수행. 한 행만 업데이트 한다.
query - 대상을 찾는 법,
update - 대상을 수정할 내용,
new - 수정 이전의 다큐먼트를 반환할지, 수정 이후의 다큐먼트를 반환할 지 결정하는 부분. { new: true }를 넣으면 수정 이후의 다큐먼트를 반환 
수정한 후에 수정된 결과를 다시 가져오고 싶다면 update 대신 findAndModify 메소드를 쓰는 게 좋음
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
db.monsters.findAndModify({ 
    query: { name: 'Demon' }, 
    update: { $set: { att: 150 } }, 
    new: true 
});
/*
1. query - name: 'Demon'인 것을
2. update - att: 150 로 내용을 수정
3. new : true - 수정 이후의 다큐먼트를 반환
*/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 

findAndModify 명령과 update 명령 이 둘의 차이점은 아래와 같다.

디폴트 옵션에서는 두 명령보두 하나의 문서만 변경할 수 있다.
하지만 update 명령은 multi 옵션을 true로 설정해서 여러 문서를 한번에 변경할 수 있다.
update 명령은 실제 어떤 문서를 변경할지 알 수없다. (매칭된 문서가 여러개일때)
하지만 findAndModify는 sort 옵션을 통해 특정 문서를 정렬해 첫 번째 문서만 변경할 수 있다.
update명령은 처리 결과를 반환하지만, findAndModify는 변경전 혹은 직후의 문서를 결과로 반환한다.
 

FindOneAndUpdate / FindOneAndReplace
findAndModify는 update, upsert, remove를 모두 담당하는데, 이 기능을 쪼개서 하나의 역할만 전담하는 메소드 라 할 수있다.
역시나 findAndModify 처럼 수정 이전 또는 이후의 다큐먼트를 반환 받는데, 대신 new 옵션이 아니라 returnNewDocument로 이름이 바뀌었다.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
db.monsters.findOneAndUpdate(
    { name: 'Demon' }, 
    { $set: { att: 150 } }, 
    { returnNewDocument: true }
);
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
