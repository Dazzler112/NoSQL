• NoSQL 성격
1.대부분 클러스터에서 실행할 목적으로 만들어졌기 때문에 관계형 모델을 사용하지 않는다. (일부는 RDBMS와 비슷한 분산 모델을 사용함.)
2.스키마 없이 동작한다.
3.구조에 대한 정의를 변경할 필요 없이 데이터베이스 레코드에 자유롭게 필드를 추가할 수 있다.

• 특징 1. 수평적 확장(Scale-out)을 통한 데이터 분산 저장
위에서 언급했듯이 기존의 관계형 데이터베이스는 시스템 하드웨어를 고성능으로 업그레이드하는 수직적 확장(Scale-up)으로 문제를 해결해야 했다. 
이는 더욱 더 고성능의 장비를 요구하는 큰 비용의 문제를 불러왔다.

반면 NoSQL 데이터베이스는 적당한 성능의 장비의 수(서버)를 늘리는 수평적 확장(Scale-out)을 통해 장비의 성능을 올릴 수 있다.
이와 같은 특징으로 인해 데이터를 저장할 때 여러 DB서버에 나누어서 저장을 하게 되는 분산 저장의 특징을 갖는다.


• 특징 #2. 자유로운 스키마(schema-free)
하나의 데이터베이스를 만드는 개념/내부/외부 스키마를 마구 만들어야 했었다. 
그러나 NoSQL 데이터베이스의 공통적인 특징은 스키마가 없이 동작한다. 
이는 DBMS가 스키마를 관리하지 않는 것일 뿐 NoSQL도 암묵적인 스키마는 존재한다. 
때문에 단일 값에 대한 데이터 타입에서 불일치가 발생 할 수 있다.


• 특징 #3.  간단한 쿼리
RDBMS는 데이터를 조회하기 위해 수많은 테이블을 JOIN 하거나 서브쿼리를 달거나 등등 복잡한 쿼리문을 사용해 왔다. 
하지만 NoSQL은 복잡한 쿼리를 사용하지 않는다.

• 특징 #4. 일관성보다 확장성
NoSQL은 아래와 같은 이유로 일관성을 양보(?)해도 된다고 말한다.

-다수가 동시에 읽고 쓰는(Read and write) 상황에서의 성능 향상을 위해서.
-분산 환경에서 노드들이 잘 작동하고 있음에도, 시스템의 일부가 고장나면 데이터베이스를 사용할 수 없게 되는 문제를 해결하기 위해서.

• 종류
Key-value
-가장 단순한 형태의 NoSQL, 값의 내용을 사용한 쿼리가 불가능하다는 단점이 있다. 
-사용자가 키를 사용해 값을 읽어드린 뒤, 어플리리이션 레벨에서 적절히 처리해야 한다.
-Memcached, Riak, Redis, Amazon Dynamo DB, LevelDB

Document
-Key-value 모델의 진화 형태로 Key-Document 형태로 저장된다.
-Document는 객체지향에서의 객체와 유사하다. 
-객체를 바로 Document형태로 저장하므로 객체-관계 매핑이 없다. 
-Document 질의 언어로 Document 내의 값을 이용한 쿼리가 가능하다.
-MongoDB, CouchDB, MarkLogic

Column-family
-HBase, Cassandra, Hypertable

Graph
-데이터를 관계와 함꼐 표현하기 위해 디자인된 모델
-연속적인 노드, 관계, 특성의 형태(그래프 형태)로 데이터를 저장
-클러스터링에 적합하지 않다

(나중에는 RDBMS 와 NoSQL 차이점에 대해 공부해볼 생각이다)
